package ScalaProgrammingV4.Chapter4
import scala.collection.mutable

class ChecksumAccumulator{
  private var sum=0
  def add(b:Byte):Unit={sum +=b}
  def checksum():Int= ~(sum & 0xFF) + 1
}

object ChecksumAccumulator{
  private val cache = mutable.Map.empty[String,Int]
  def calculate(s:String):Int=
    if(cache.contains(s))
      cache(s)
    else{
      val acc=new ChecksumAccumulator
      for(c<-s)
        acc.add(c.toByte)
      val cs=acc.checksum()
      cache +=(s ->cs)
      cs
    }
}

---------------------------------------------------------
This is the main Class implemented by Scala

Then run "scalac ScalaProgrammingV4.Chapter4.ChecksumAccumulator.scala"
It will generate ChecksumAccumulator class
---------------------------------------------------------


import ScalaProgrammingV4.Chapter4.ChecksumAccumulator.calculate

object Summer{
  def main(args:Array[String])={
    for(arg <- args){
      println(arg + ": " + calculate(arg))
    }
  }
}

-----------------------------------------------------------
This is main function entrance
run "scalac ScalaProgrammingV4.Chapter4.Summer.scala"

Once done run "scala Summer of love"
of love is the arguments for main function
