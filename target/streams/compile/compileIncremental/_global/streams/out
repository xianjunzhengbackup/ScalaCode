[0m[[0m[0mdebug[0m] [0m[0m[zinc] IncrementalCompile -----------[0m
[0m[[0m[0mdebug[0m] [0m[0mIncrementalCompile.incrementalCompile[0m
[0m[[0m[0mdebug[0m] [0m[0mprevious = Stamps for: 234 products, 25 sources, 2 libraries[0m
[0m[[0m[0mdebug[0m] [0m[0mcurrent source = Set(${BASE}/src/main/scala/mycode/DeZeroScala/step06.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step28.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step02.scala, ${BASE}/src/main/scala/ScalaProgrammingV4/Chapter4/ChecksumAccumulator.scala, ${BASE}/src/main/scala/ScalaProgrammingV4/Chapter10/element.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step01.scala, ${BASE}/src/main/scala/simulation/BasicCircuitSimulation.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step03.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step04.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/newStep.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step29V2.scala, ${BASE}/src/main/scala/ScalaProgrammingV4/Chapter4/Summer.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step13V2.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step07.scala, ${BASE}/src/main/scala/simulation/CircuitSimulation.scala, ${BASE}/src/main/scala/ScalaProgrammingV4/Chapter6/Rational.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step09.scala, ${BASE}/src/main/scala/simulation/MySimulation.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step29.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step27.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/newStepV2.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step19.scala, ${BASE}/src/main/scala/mycode/DeZeroScala/step13.scala, ${BASE}/src/main/scala/simulation/Simulation.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m> initialChanges = InitialChanges(Changes(added = Set(), removed = Set(${BASE}/src/main/scala/example/Hello.scala), changed = Set(), unmodified = ...),Set(),Set(),API Changes: Set())[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes:[0m
[0m[[0m[0mdebug[0m] [0m[0m	removed: Set(${BASE}/src/main/scala/example/Hello.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(example.Hello)[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(example.Hello)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: example.Hello[0m
[0m[[0m[0mdebug[0m] [0m[0mcompilation cycle 1[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from example.Hello...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: example.Hello[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(example.Hello)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(example.Hello,ModifiedNames(changes = UsedName(asInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(finalize,[Default]), UsedName(Hello;init;$,[Default]), UsedName(##,[Default]), UsedName(getClass,[Default]), UsedName(isInstanceOf,[Default]), UsedName(Object;init;,[Default]), UsedName(main,[Default]), UsedName(toString,[Default]), UsedName(equals,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(Hello,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(==,[Default]))) invalidates 1 classes due to The example.Hello has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(asInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(notify,[Default]), UsedName(ne,[Default]), UsedName(finalize,[Default]), UsedName(Hello;init;$,[Default]), UsedName(##,[Default]), UsedName(getClass,[Default]), UsedName(isInstanceOf,[Default]), UsedName(Object;init;,[Default]), UsedName(main,[Default]), UsedName(toString,[Default]), UsedName(equals,[Default]), UsedName(clone,[Default]), UsedName(eq,[Default]), UsedName(Hello,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(==,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m  > by transitive inheritance: Set(example.Hello)[0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m  > [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: [0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0mFinal step, transitive dependencies:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: example.Hello[0m
[0m[[0m[0mdebug[0m] [0m[0mNo classes were invalidated.[0m
